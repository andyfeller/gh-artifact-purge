#!/usr/bin/env bash
set -e

RUN=false

__USAGE="
List and delete GitHub Actions artifacts based on new retention policy.

USAGE
  $(basename $0) [options] <owner> <retention_in_days>
  $(basename $0) [options] <owner>/<repo> <retention_in_days>

FLAGS
  -d, --debug                          Enable debugging
  -h, --help                           Displays help usage
  -r, --run                            Apply changes; defaults to dryrun
";

die() {
	printf "\nError: %s\n" "$1"
	echo "$__USAGE"
	exit 1
}

process_repo() {

	NWO="$1"

	printf "%s:  processing\n" $NWO

	for data in $(gh api "/repos/$NWO/actions/artifacts" --jq '.artifacts[] | @base64'); do

		# Extract actions artifact information
		artifact() {
			echo -n $data | base64 --decode | jq -r "${1}"
		}

		ID=$(artifact '.id')
		NAME=$(artifact '.name')
		CREATED=$(artifact '.created_at')
		SIZE_BYTES=$(artifact '.size_in_bytes')
		WORKFLOW_RUN_ID=$(artifact '.workflow_run.id')
		EXPIRES=$(artifact '.expires_at')

		# Convert dates for easier comparison, calculate new expiration date
		CREATED_SECS=$(date -j -f '%Y-%m-%dT%H:%M:%SZ' "$CREATED" '+%s')
		EXPIRES_SECS=$(date -j -f '%Y-%m-%dT%H:%M:%SZ' "$EXPIRES" '+%s')
		AMENDED=$(date -j -f '%Y-%m-%dT%H:%M:%SZ' -v"+${RETENTION}d" "$CREATED" '+%Y-%m-%dT%H:%M:%SZ')
		AMENDED_SECS=$(date -j -f '%Y-%m-%dT%H:%M:%SZ' -v"+${RETENTION}d" "$CREATED" '+%s')

		# Lookup workflow run information
		WORKFLOW_RUN_DATA=$(gh api "/repos/$NWO/actions/runs/$WORKFLOW_RUN_ID" --jq '. | @base64')

		workflow_run() {
			echo -n $WORKFLOW_RUN_DATA | base64 --decode | jq -r "${1}"
		}

		WORKFLOW_ID=$(workflow_run '.workflow_id')

		# Lookup workflow information related to workflow run
		WORKFLOW_DATA=$(gh api "/repos/$NWO/actions/workflows/$WORKFLOW_ID" --jq '. | @base64')

		workflow() {
			echo -n $WORKFLOW_DATA | base64 --decode | jq -r "${1}"
		}

		WORKFLOW_NAME=$(workflow '.name')
		WORKFLOW_PATH=$(workflow '.path')
		WORKFLOW_STATE=$(workflow '.state')

		artifact_status() {
			ACTION="$1"

			cat <<-EOF
			$NWO:  $ACTION $ID
			    Name:    $NAME
			    ID:      $ID
			    Size:    $SIZE_BYTES bytes
			    Created: $CREATED  ($CREATED_SECS seconds)
			    Amended: $AMENDED  ($AMENDED_SECS seconds)
			    Expires: $EXPIRES  ($EXPIRES_SECS seconds)
			    Workflow:
			        Name:  $WORKFLOW_NAME
			        ID:    $WORKFLOW_ID
			        PATH:  $WORKFLOW_PATH
			        State: $WORKFLOW_STATE
			EOF
		}

		if [ $AMENDED_SECS -gt $NOW_SECS ]; then
			artifact_status 'skipping'  # Artifact amended expiration in future
		elif $RUN; then
			artifact_status 'deleting'  # Artifact amended expiration in past and in run mode
			# gh api -X DELETE "/repos/$NWO/actions/artifacts/$ID"
		else
			artifact_status 'nominating'  # Artifact amended expiration in past and in dryrun mode
		fi
	done
}

# Process command line flags
while getopts "dhr-:" OPT; do
	if [ "$OPT" = "-" ]; then    # long option: reformulate OPT and OPTARG
		OPT="${OPTARG%%=*}"      # extract long option name
		OPTARG="${OPTARG#$OPT}"	 # extract long option argument (may be empty)
		OPTARG="${OPTARG#=}"     # if long option argument, remove assigning `=`
	fi

	case "$OPT" in
		debug | d)
			export GH_DEBUG=api
			set -x
			;;

		help | h)
			echo "$__USAGE"
			exit 0
			;;

		run | r)
			RUN=true
			;;
	esac
done

# Check for pre-requisites
if ! type -p gh > /dev/null; then
	die "'gh' could not be found"
fi

if ! type -p jq > /dev/null; then
	die "'jq' could not be found"
fi

# Shift so that $@, $1, etc. refer to the non-option arguments
shift "$((OPTIND-1))"

if test "$#" -lt 2; then
  die "Must provide owner or owner/repo and retention in days"
fi

# Capture timestamp for evaluation purposes
NOW=$(date -j '+%Y-%m-%dT%H:%M:%SZ')
NOW_SECS=$(date -j -f '%Y-%m-%dT%H:%M:%SZ' "$NOW" '+%s')
printf "Evaluating artifacts against %s (%s seconds)\n" $NOW $NOW_SECS

# Process owner or owner/repo appropriately
if [[ "$1" == *"/"* ]]; then
	NWO="$1"
	RETENTION="$2"

	process_repo $NWO $RETENTION
else
	OWNER="$1"
	RETENTION="$2"

	printf "%s:  processing\n" $OWNER

	for nwo in $(gh repo list "$OWNER" --json nameWithOwner --jq '.[].nameWithOwner'); do
		process_repo $nwo $RETENTION
	done
fi
