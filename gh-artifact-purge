#!/usr/bin/env bash
set -e

RUN=false
PURGE_EXPIRED=false

__USAGE="
List and delete GitHub Actions artifacts based on new retention policy.

USAGE
  $(basename $0) [options] <owner> <retention_in_days>
  $(basename $0) [options] <owner>/<repo> <retention_in_days>

FLAGS
  -d, --debug                          Enable debugging
  -h, --help                           Displays help usage
  -r, --run                            Apply changes; defaults to dryrun
  -p, --purge-expired                  Purge expired artifacts; defaults to skip
";

die() {
	printf "\nError: %s\n" "$1"
	echo "$__USAGE"
	exit 1
}

process_repo() {

	NWO="$1"
	PAGE=1

	printf "%s:  processing\n" $NWO

	while true; do
		set +e
		artifacts_data=$(gh api "repos/$NWO/actions/artifacts" -X GET -F page=$PAGE -F per_page=100 --jq '. | @base64')
		artifacts_error=$?
		set -e

		if [ "${artifacts_error}" -ne 0 ]; then
			printf "%s:  erred (retrieving artifacts)\n" $NWO
			break;
		fi

		artifacts() {
			echo -n $artifacts_data | base64 --decode | jq -r "${1}"
		}

		if [ "$(artifacts '.artifacts | length')" == "0" ]; then
			break;
		fi

		if [ $PAGE -eq 1 ]; then
			printf "%s:  processing %'d artifacts\n" $NWO $(artifacts '.total_count')
		fi

		for data in $(artifacts '.artifacts[] | @base64'); do

			# Extract actions artifact information
			artifact() {
				echo -n $data | base64 --decode | jq -r "${1}"
			}

			ID=$(artifact '.id')
			NAME=$(artifact '.name')
			CREATED=$(artifact '.created_at')
			SIZE_BYTES=$(artifact '.size_in_bytes')
			WORKFLOW_RUN_ID=$(artifact '.workflow_run.id')
			EXPIRES=$(artifact '.expires_at')
			EXPIRED=$(artifact '.expired')

			# Convert dates for easier comparison, calculate new expiration date
			if [[ "$OSTYPE" == "linux-gnu"* ]]; then
				CREATED_SECS=$(date -d "$CREATED" '+%s')
				EXPIRES_SECS=$(date -d "$EXPIRES" '+%s')
				AMENDED=$(date -d "${CREATED} +${RETENTION} days" '+%Y-%m-%dT%H:%M:%SZ')
				AMENDED_SECS=$(date -d "$AMENDED" '+%s')
			elif [[ "$OSTYPE" == "darwin"* ]]; then
				CREATED_SECS=$(date -j -f '%Y-%m-%dT%H:%M:%SZ' "$CREATED" '+%s')
				EXPIRES_SECS=$(date -j -f '%Y-%m-%dT%H:%M:%SZ' "$EXPIRES" '+%s')
				AMENDED=$(date -j -f '%Y-%m-%dT%H:%M:%SZ' -v"+${RETENTION}d" "$CREATED" '+%Y-%m-%dT%H:%M:%SZ')
				AMENDED_SECS=$(date -j -f '%Y-%m-%dT%H:%M:%SZ' "$AMENDED" '+%s')
			fi

			# Lookup workflow run information
			WORKFLOW_RUN_DATA=$(gh api "repos/$NWO/actions/runs/$WORKFLOW_RUN_ID" --jq '. | @base64')

			workflow_run() {
				echo -n $WORKFLOW_RUN_DATA | base64 --decode | jq -r "${1}"
			}

			WORKFLOW_ID=$(workflow_run '.workflow_id')

			# Lookup workflow information related to workflow run
			WORKFLOW_DATA=$(gh api "repos/$NWO/actions/workflows/$WORKFLOW_ID" --jq '. | @base64')

			workflow() {
				echo -n $WORKFLOW_DATA | base64 --decode | jq -r "${1}"
			}

			WORKFLOW_NAME=$(workflow '.name')
			WORKFLOW_PATH=$(workflow '.path')
			WORKFLOW_STATE=$(workflow '.state')

			# Evaluate artifact and take action
			artifact_status() {
				ACTION="$1"

				cat <<-EOF
				$NWO:  $ACTION $ID
				    Name:      $NAME
				    ID:        $ID
				    Size:      $SIZE_BYTES bytes
				    Created:   $CREATED  ($CREATED_SECS seconds)
				    Amended:   $AMENDED  ($AMENDED_SECS seconds)
				    Expires:   $EXPIRES  ($EXPIRES_SECS seconds)
				    Expired:   $EXPIRED
				    Workflow:
				        Name:  $WORKFLOW_NAME
				        ID:    $WORKFLOW_ID
				        Path:  $WORKFLOW_PATH
				        State: $WORKFLOW_STATE
				EOF
			}

			if [ $EXPIRED == "true" ]; then
				if $PURGE_EXPIRED; then
					if $RUN; then
						artifact_status 'deleting (expired)'  # Artifact expired and in run mode
						gh api -X DELETE "repos/$NWO/actions/artifacts/$ID"
					else
						artifact_status 'nominating (expired)'  # Artifact amended expiration in past and in dryrun mode
					fi
				else
					artifact_status 'skipping (expired)'
				fi
			elif [ $AMENDED_SECS -gt $NOW_SECS ]; then
				artifact_status 'skipping (within retention)'  # Artifact amended expiration in future
			elif $RUN; then
				artifact_status 'deleting'  # Artifact amended expiration in past and in run mode
				gh api -X DELETE "repos/$NWO/actions/artifacts/$ID"
			else
				artifact_status 'nominating'  # Artifact amended expiration in past and in dryrun mode
			fi
		done

		(( ++PAGE ))  # Increment next page to pull
	done
}

# Process command line flags
while getopts "dhrp-:" OPT; do
	if [ "$OPT" = "-" ]; then    # long option: reformulate OPT and OPTARG
		OPT="${OPTARG%%=*}"      # extract long option name
		OPTARG="${OPTARG#$OPT}"	 # extract long option argument (may be empty)
		OPTARG="${OPTARG#=}"     # if long option argument, remove assigning `=`
	fi

	case "$OPT" in
		debug | d)
			export GH_DEBUG=api
			set -x
			;;

		help | h)
			echo "$__USAGE"
			exit 0
			;;

		run | r)
			RUN=true
			;;

		purge-expired | p)
			PURGE_EXPIRED=true
			;;
	esac
done

# Check for pre-requisites
if ! type -p gh > /dev/null; then
	die "'gh' could not be found"
fi

if ! type -p jq > /dev/null; then
	die "'jq' could not be found"
fi

# Shift so that $@, $1, etc. refer to the non-option arguments
shift "$((OPTIND-1))"

if test "$#" -lt 2; then
  die "Must provide owner or owner/repo and retention in days"
fi

# Capture timestamp for evaluation purposes
if [[ "$OSTYPE" == "linux-gnu"* ]]; then
	NOW=$(date '+%Y-%m-%dT%H:%M:%SZ')
	NOW_SECS=$(date -d "$NOW" '+%s')
elif [[ "$OSTYPE" == "darwin"* ]]; then
	NOW=$(date -j '+%Y-%m-%dT%H:%M:%SZ')
	NOW_SECS=$(date -j -f '%Y-%m-%dT%H:%M:%SZ' "$NOW" '+%s')
fi

printf "Evaluating artifacts against %s (%s seconds)\n" $NOW $NOW_SECS

# Process owner or owner/repo appropriately
if [[ "$1" == *"/"* ]]; then
	NWO="$1"
	RETENTION="$2"

	process_repo $NWO $RETENTION
else
	OWNER="$1"
	RETENTION="$2"

	QUERY='
		query ($owner: String!, $endCursor: String) {
		  repositoryOwner(login: $owner) {
		    repositories(first: 100, after: $endCursor) {
		      totalCount
		    }
		  }
		}
	'

	TOTAL=$(gh api graphql -f query="${QUERY}" -F owner="$OWNER" --jq '.data.repositoryOwner.repositories.totalCount')
	printf "%s:  processing %'d repositories\n" $OWNER $TOTAL

	QUERY='
		query ($owner: String!, $endCursor: String) {
		  repositoryOwner(login: $owner) {
		    repositories(first: 100, after: $endCursor) {
		      pageInfo {
		        endCursor
		        hasNextPage
		      }
		      nodes {
		        nameWithOwner
		      }
		    }
		  }
		}
	'

	for nwo in $(gh api graphql -f query="${QUERY}" -F owner="$OWNER" --paginate --jq '.data.repositoryOwner.repositories.nodes[].nameWithOwner'); do
		process_repo $nwo $RETENTION
	done
fi
